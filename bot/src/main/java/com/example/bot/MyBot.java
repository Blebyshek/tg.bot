package com.example.bot;

import com.example.bot.config.BotConfig;
import com.example.bot.model.*;
import com.vdurmont.emoji.EmojiParser;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboard;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.util.*;

@Component
public class MyBot extends TelegramLongPollingBot {

    final BotConfig config;

    private final UserRepository userRepository;
    private final UserLikesRepository userLikesRepository;




    @Autowired
    public MyBot(BotConfig config, UserRepository userRepository, UserLikesRepository userLikesRepository) {
        super("6054034146:AAHgKCkrZFpj5V4xlouy2EbVPaYhtTGZo_0");
        this.config = config;
        this.userRepository = userRepository;
        this.userLikesRepository=userLikesRepository;


    }

    @Override
    public String getBotUsername() {
        return config.getBotName();
    }



    private void sendMessage(long chatId, String textToSend) {
        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText(EmojiParser.parseToUnicode(textToSend)); //–ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Å–º–∞–π–ª–∏–∫–æ–≤
        message.setParseMode("HTML");
        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }

    }
    private void sendMessage(long chatId, String textToSend, ReplyKeyboard keyboard) {
        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText(EmojiParser.parseToUnicode(textToSend)); // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å–º–∞–π–ª–∏–∫–æ–≤
        message.setParseMode("HTML");

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
        message.setReplyMarkup(keyboard);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }



    @Override
    @Transactional
    public void onUpdateReceived(Update update) {
        if (update.hasMessage() && update.getMessage().hasText()) {
            long chatId = update.getMessage().getChatId();
            String messageText = EmojiParser.parseToUnicode(update.getMessage().getText());
            User user = userRepository.findById(chatId).orElse(null);
            Long likedUserId;
            User userLiked;



            if ("/start".equals(messageText)) {
                if (user == null || user.getName()==null || user.getAge()==null || user.getFaculty()==null || user.getDescription()==null || user.getPurpose()==null ) {
                    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∞–Ω–∫–µ—Ç—É
                    User newUser = new User();
                    newUser.setChatId(chatId);
                    newUser.setState(UserState.NAME);
                    userRepository.save(newUser);

                    sendMessage(chatId, "–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π –∑–∞–ø–æ–ª–Ω–∏–º –∞–Ω–∫–µ—Ç—É. –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?");
                } else {
                    user.setState(UserState.MENU); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ MENU
                    userRepository.save(user);
                    sendMessage(chatId, "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–Ω–∫–µ—Ç–∞!");
                    showProfile(chatId, user);
                }
            } else {
                if (user != null) {
                    UserState state = user.getState();

                    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    switch (state) {
                        case NAME:
                            user.setName(messageText);
                            user.setNickname(update.getMessage().getFrom().getUserName());
                            user.setState(UserState.PURPOSE);
                            userRepository.save(user);

                            ReplyKeyboardMarkup purposeKeyboard = new ReplyKeyboardMarkup();
                            purposeKeyboard.setOneTimeKeyboard(true);
                            purposeKeyboard.setResizeKeyboard(true);
                            List<KeyboardRow> purposeRows=new ArrayList<>();

                            KeyboardRow purposeRow = new KeyboardRow();
                            purposeRow.add(new KeyboardButton("–ü–æ–º–æ—â—å –ø–æ —É—á–µ–±–µ"));
                            purposeRow.add(new KeyboardButton("–ü–æ–∏—Å–∫ –¥—Ä—É–∑–µ–π"));
                            purposeRows.add(purposeRow);
                            purposeKeyboard.setKeyboard(purposeRows);

                            sendMessage(chatId, "–¶–µ–ª—å –ø–æ–∏—Å–∫–∞? (–ü–æ–º–æ—â—å –ø–æ —É—á–µ–±–µ/–ü–æ–∏—Å–∫ –¥—Ä—É–∑–µ–π)", purposeKeyboard);
                            break;
                        case PURPOSE:

                            if (messageText.equalsIgnoreCase("–ü–æ–∏—Å–∫ –¥—Ä—É–∑–µ–π") || messageText.equalsIgnoreCase("–ü–æ–º–æ—â—å –ø–æ —É—á–µ–±–µ")) {
                                user.setPurpose(messageText);
                                user.setState(UserState.AGE);
                                userRepository.save(user);
                                sendMessage(chatId, "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç.");
                            } else {
                                sendMessage(chatId, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.");
                                return;
                            }
                            break;
                        case AGE:
                            try {
                                int age = Integer.parseInt(messageText);
                                user.setAge(age);
                                user.setState(UserState.FACULTY);
                                userRepository.save(user);

                                ReplyKeyboardMarkup facultyKeyboard = showFacultyKeyboard();
                                sendMessage(chatId, "–í–∞—à —Ñ–∞–∫—É–ª—å—Ç–µ—Ç", facultyKeyboard);

                            } catch (NumberFormatException e) {
                                sendMessage(chatId, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.");
                                return;
                            }
                            break;
                        case FACULTY:
                            String [] validFaculties={"–ê–í–¢–§", "–§–õ–ê", "–ú–¢–§", "–§–ú–ê", "–§–ü–ú–ò", "–†–≠–§", "–§–¢–§", "–§–≠–ù", "–§–ë", "–§–ì–û", "–ò–°–¢", "–í–°–ï"};

                            if (Arrays.asList(validFaculties).contains(messageText.toUpperCase())) {
                                user.setFaculty(messageText);
                                user.setState(UserState.DESCRIPTION);
                                userRepository.save(user);
                                sendMessage(chatId, "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ.");
                            } else {
                                sendMessage(chatId, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.");
                            }
                            break;
                        case DESCRIPTION:
                            if (messageText.length() <= 100) {
                                user.setDescription(messageText);
                                user.setState(UserState.MENU); // –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–µ–Ω—é –ø–æ—Å–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã
                                userRepository.save(user);
                                sendMessage(chatId, "–ê–Ω–∫–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞!");
                                showProfile(chatId, user);

                            } else {
                                sendMessage(chatId, "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –æ–ø–∏—Å–∞–Ω–∏—è - 100 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 100 —Å–∏–º–≤–æ–ª–æ–≤.");
                                sendMessage(chatId, "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ.");
                            }
                            break;
                        case COMPLETED:
                            sendMessage(chatId, "–í—ã —É–∂–µ –∑–∞–ø–æ–ª–Ω–∏–ª–∏ –∞–Ω–∫–µ—Ç—É.");
                            break;
                        case MENU:
                            switch (messageText) {
                                case "1", "\uD83D\uDD8AÔ∏è" -> {
                                    // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–∫–µ—Ç—É
                                    user.setState(UserState.NAME);
                                    userRepository.save(user);
                                    sendMessage(chatId, "–†–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –∞–Ω–∫–µ—Ç—É. –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?");
                                }
                                case "2", "üîç"-> {
                                    // –°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã
                                    user.setCurrentIndex(0);
                                    userRepository.save(user);
                                    showViewKeyboard(chatId);
                                    showOtherUsers(chatId);

                                }
                                case "3", "–ú–æ—è –∞–Ω–∫–µ—Ç–∞"-> showProfile(chatId, user);
                                default -> {
                                    sendMessage(chatId, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é.");
                                    showMenuKeyboard(chatId);
                                }
                            }
                            break;
                        case VIEW:
                            switch (messageText) {

                                case "like": {
                                    userLiked = userRepository.findById(user.getViewedUserId()).orElse(null);
                                    userLiked.setState(UserState.LIKED);
                                    userRepository.save(userLiked);
                                    List<UserLikes> likedList = userLikesRepository.findByLikedAndLiker(userLiked, user);
                                    for (UserLikes userLikes : likedList) {
                                        userLikes.setBooleanLiker(true);
                                        userLikes.setBooleanLiked(false);
                                        userLikesRepository.save(userLikes);
                                    }
                                    sendMessage(user.getViewedUserId(), "–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –∫–æ–º—É-—Ç–æ –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å. –•–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å? (–î–∞/–ù–µ—Ç)");

                                    showViewKeyboard(chatId);
                                    showOtherUsers(chatId);
                                    break;
                                }
                                case "dislike":
                                {
                                    userLiked = userRepository.findById(user.getViewedUserId()).orElse(null);
                                    List<UserLikes> likedList = userLikesRepository.findByLikedAndLiker(userLiked, user);
                                    for (UserLikes userLikes : likedList) {
                                        userLikes.setBooleanLiker(false);
                                        userLikesRepository.save(userLikes);
                                    }
                                    showViewKeyboard(chatId);
                                    showOtherUsers(chatId);
                                } break;

                                case "stop":
                                {
                                    showMenuKeyboard(chatId);
                                    user.setState(UserState.MENU);
                                    userRepository.save(user);
                                }
                                break;
                                default: sendMessage(chatId, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.");
                                break;
                            } break;

                        case LIKED: {
                            if (messageText.equalsIgnoreCase("–î–∞")) {

                                user.setState(UserState.MENU);
                                userRepository.save(user);
                            } else if (messageText.equalsIgnoreCase("–ù–µ—Ç")) {

                                showMenuKeyboard(chatId);
                                user.setState(UserState.MENU);
                                userRepository.save(user);
                            }
                            break;
                        }

                        case RECIPROCITY: {
                            switch (messageText){
                                case "–î–∞": {
                                    likedUserId=user.getLikedUserId();
                                    String userLinkHTML;
                                    userLiked = userRepository.findById(likedUserId).orElse(null);
                                    if (userLiked.getNickname()==null){
                                        userLinkHTML = "<a href=\"tg://user?id=" + likedUserId + "\">" + userLiked.getName() + "</a>";
                                        sendMessage(chatId, "–°–≤—è–∑–∞—Ç—å—Å—è —Å " + userLinkHTML);
                                    } else {
                                        userLinkHTML = "<a href=\"t.me/" + userLiked.getNickname() + "\">" + userLiked.getName() + "</a>";
                                        sendMessage(chatId, "–°–≤—è–∑–∞—Ç—å—Å—è —Å " + userLinkHTML);
                                    }
                                    if (user.getNickname()==null){
                                        userLinkHTML = "<a href=\"tg://user?id=" + chatId + "\">" + user.getName() + "</a>";
                                        sendMessage(likedUserId, "–ï—Å—Ç—å –≤–∑–∞–∏–º–Ω–æ—Å—Ç—å —Å " + userLinkHTML);
                                    } else {
                                        userLinkHTML = "<a href=\"t.me/" + user.getNickname() + "\">" + user.getName() + "</a>";
                                        sendMessage(likedUserId, "–ï—Å—Ç—å –≤–∑–∞–∏–º–Ω–æ—Å—Ç—å  —Å " + userLinkHTML);
                                    }
                                    //showMenuKeyboard(chatId);
                                    user.setState(UserState.MENU);
                                    userRepository.save(user);
                                } break;
                                case "–ù–µ—Ç": {
                                    showMenuKeyboard(chatId);
                                    user.setState(UserState.MENU);
                                    userRepository.save(user);
                                } break;

                            }
                        }
                        break;

                    }
                } else {
                    sendMessage(chatId, "–ê–Ω–∫–µ—Ç–∞ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞ –≤–≤–µ–¥–∏—Ç–µ /start");

                }
            }
        }
    }
    private ReplyKeyboardMarkup showFacultyKeyboard(){
        List<String> faculties = Arrays.asList("–ê–í–¢–§", "–§–õ–ê", "–ú–¢–§", "–§–ú–ê", "–§–ü–ú–ò", "–†–≠–§", "–§–¢–§", "–§–≠–ù", "–§–ë", "–§–ì–û", "–ò–°–¢", "–í–°–ï");

        ReplyKeyboardMarkup facultyKeyboard=new ReplyKeyboardMarkup();
        facultyKeyboard.setOneTimeKeyboard(true);
        facultyKeyboard.setResizeKeyboard(true);

        List<KeyboardRow> keyboard =new ArrayList<>();
        KeyboardRow facultyRow = new KeyboardRow();
        for (String faculty: faculties){
            facultyRow.add(new KeyboardButton(faculty));
                if(facultyRow.size()==3){
                    keyboard.add(facultyRow);
                    facultyRow=new KeyboardRow();
                }
        }
        if (!facultyRow.isEmpty()){
            keyboard.add(facultyRow);
        }

        facultyKeyboard.setKeyboard(keyboard);
        return facultyKeyboard;
    }

    private void showMenuKeyboard(long chatId) {
        ReplyKeyboardMarkup menuKeyboard = new ReplyKeyboardMarkup();
        menuKeyboard.setOneTimeKeyboard(true);
        menuKeyboard.setResizeKeyboard(true);
        List<KeyboardRow> menuRows =new ArrayList<>();

        KeyboardRow menuRow = new KeyboardRow();
        menuRow.add(new KeyboardButton("\uD83D\uDD8AÔ∏è"));
        menuRow.add(new KeyboardButton("\uD83D\uDD0D"));
        menuRow.add(new KeyboardButton("–ú–æ—è –∞–Ω–∫–µ—Ç–∞"));
        menuRows.add(menuRow);
        menuKeyboard.setKeyboard(menuRows);

        sendMessage(chatId, "–ú–µ–Ω—é:\n1) –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–∫–µ—Ç—É\n2) –°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã\n3)–ú–æ—è –∞–Ω–∫–µ—Ç–∞", menuKeyboard);
    }
    private void showViewKeyboard(long chatId) {
        ReplyKeyboardMarkup viewKeyboard = new ReplyKeyboardMarkup();
        viewKeyboard.setOneTimeKeyboard(true);
        viewKeyboard.setResizeKeyboard(true);
        List<KeyboardRow> viewRows =new ArrayList<>();

        KeyboardRow viewRow = new KeyboardRow();
        viewRow.add(new KeyboardButton("like"));
        viewRow.add(new KeyboardButton("dislike"));
        viewRow.add(new KeyboardButton("stop"));
        viewRows.add(viewRow);
        viewKeyboard.setKeyboard(viewRows);

        sendMessage(chatId, "\uD83D\uDE09\uD83D\uDDFF", viewKeyboard);
    }


    private void showOtherUsers(long chatId) {
        List<User> userList = userRepository.findAll(); // –ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è.
        User currentUser = userRepository.findById(chatId).orElse(null);
        int currentUserIndex = currentUser.getCurrentIndex();

        userList.removeIf(user -> user.getChatId().equals(chatId));
        userList.sort(Comparator.comparingLong(User::getChatId)); //–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –ë–î –º–µ–Ω—è–ª–∏—Å—å –º–µ—Å—Ç–∞–º–∏ –∏ –±—ã–ª –±–∞–≥ –ø–æ–∫–∞–∑–∞ 1 –∞–Ω–∫–µ—Ç—ã, —ç—Ç–æ –µ–≥–æ —É–±–∏—Ä–∞–µ—Ç

        if (currentUserIndex < userList.size()) {
            User viewedUser = userList.get(currentUserIndex);

            String message = "–ê–Ω–∫–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è " + viewedUser.getName() + ":\n" +
                    "–ò–º—è: " + viewedUser.getName() + "\n" +
                    "–ü–æ–ª: " + viewedUser.getPurpose() + "\n" +
                    "–ì–æ—Ä–æ–¥: " + viewedUser.getFaculty() + "\n" +
                    "–û–ø–∏—Å–∞–Ω–∏–µ: " + viewedUser.getDescription() + "\n\n";

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–Ω–∫–µ—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            sendMessage(chatId, message);
            currentUser.setViewedUserId(viewedUser.getChatId());
            currentUserIndex++;
            currentUser.setCurrentIndex(currentUserIndex);
            currentUser.setState(UserState.VIEW);
            userRepository.save(currentUser);
        } else {
            // –ï—Å–ª–∏ –±–æ–ª—å—à–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç, –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞
            sendMessage(chatId, "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω.");
            showMenuKeyboard(chatId);
            currentUserIndex = 0;
            currentUser.setCurrentIndex(currentUserIndex);
            currentUser.setState(UserState.MENU);
            userRepository.save(currentUser);
        }


    }









    private void showProfile(long chatId, User user) {

        sendMessage(chatId, "–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞:\n–ò–º—è: " + user.getName() + "\n–ü–æ–ª: " + user.getPurpose() + "\n–í–æ–∑—Ä–∞—Å—Ç: " + user.getAge() + "\n–ì–æ—Ä–æ–¥: " + user.getFaculty() + "\n–û–ø–∏—Å–∞–Ω–∏–µ: " + user.getDescription());
        showMenuKeyboard(chatId);
    }


}
